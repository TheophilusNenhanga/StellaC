---
import DocumentationLayout from "../../layouts/DocumentationLayout.astro";
import CodeBlock from "../../components/CodeBlock.astro";

const basicIfStatement = `
// Basic if statement
if condition {
    println("This condition is true");


// If-else statement
if age >= 18 {
    println("Adult");
} else {
    println("Minor");


// If-else if-else statement
if score >= 90 {
    println("A grade");
} else if score >= 80 {
    println("B grade");
} else if score >= 70 {
    println("C grade");
} else {
    println("Lower grade");
}
`;

const basicWhileLoop = `// Basic while loop
let i = 0;
while i < 5 {
    println(i);
    i = i + 1;
}

// Output:
// 0
// 1
// 2
// 3
// 4
`;

const basicForLoop = `// Basic for loop
for let i = 0; i < 5; i = i + 1 {
    println(i);


// Output:
// 0
// 1
// 2
// 3
// 4`;

const combinedExample = `// Function to find prime numbers up to a limit
fn findPrimes(limit) {
    let primes = [];
    
    for let i = 2; i <= limit; i = i + 1 {
        let isPrime = true;
        
        for let j = 2; j < i; j = j + 1 {
            if i % j == 0 {
                isPrime = false;
                break;
            
        
        
        if isPrime {
            array_add(primes, i);
        
    
    
    return primes;


let primeNumbers = findPrimes(20);
// primeNumbers = [2, 3, 5, 7, 11, 13, 17, 19]`;
---

<DocumentationLayout title="Control Flow">
  <section>
    <p class="text-xl mb-6">
      Control flow statements allow you to control the execution of your code based on conditions or to repeat blocks of code.
    </p>
    
    <h2 class="text-2xl font-bold mt-8 mb-4">If Statements</h2>
    <p class="mb-4">
      If statements allow you to execute a block of code only if a specified condition is true.
    </p>
    <CodeBlock code={basicIfStatement} id="basic-if-statement" />
    <h2 class="text-2xl font-bold mt-8 mb-4">While Loops</h2>
    <p class="mb-4">
      While loops execute a block of code as long as a specified condition is true.
    </p>
   <CodeBlock code={basicWhileLoop} id="basic-while-loop" />
    
    <h2 class="text-2xl font-bold mt-8 mb-4">For Loops</h2>
    <p class="mb-4">
      For loops are typically used when you know how many times you want to execute a block of code.
    </p>
    <CodeBlock code={basicForLoop} id="basic-for-loop" />
    
    <div class="bg-yellow-100 dark:bg-yellow-900 p-4 rounded-md my-8">
      <h3 class="text-lg font-bold">Note</h3>
      <p class="mt-2">
        Unlike many other programming languages, Stella's for loops do not have built-in array iteration syntax.
        You need to manually iterate over arrays using indexes.
      </p>
    </div>
    
    <h2 class="text-2xl font-bold mt-8 mb-4">Example: Combining Control Flow</h2>
    <p class="mb-4">
      Here's an example that combines different control flow statements:
    </p>
    <CodeBlock code={combinedExample} id="combined-example" />
    <div class="bg-blue-100 dark:bg-blue-900 p-4 rounded-md my-8">
      <p class="font-semibold">Next Steps</p>
      <p class="mt-2">
        Now that you understand control flow, learn about 
        <a href="/docs/functions" class="text-blue-600 dark:text-blue-400 underline">Functions</a> 
        to structure your code into reusable components.
      </p>
    </div>
  </section>
</DocumentationLayout> 