// Basic anonymous function creation and calling
let simple = fn() { return 42; };
println("Test 1 - Basic anonymous function:");
println(simple()); // Should println 42
println("");

// Anonymous function with parameters
let add = fn(a, b) { return a + b; };
println("Test 2 - Parameters:");
println(add(5, 3));  // Should println 8
println(add(10, 20));  // Should println 30
println("");

// Closure test
let makeCounter = fn() {
    let count = 0;
    return fn() {
        count = count + 1;
        return count;
    };
};

println("Test 3 - Closures:");
let counter1 = makeCounter();
let counter2 = makeCounter();
println(counter1()); // Should println 1
println(counter1()); // Should println 2
println(counter2()); // Should println 1 (separate count)
println(counter1()); // Should println 3
println("");

// Multiple nested closures
let makePowerFn = fn() {
    let exponent = 1;
    return fn() {
        let currentExp = exponent;
        exponent = exponent + 1;
        return fn(x) {
            let result = 1;
            let i = 0;
            while (i < currentExp) {
                result = result * x;
                i = i + 1;
            }
            return result;
        };
    };
};

println("Test 4 - Nested closures:");
let powerGenerator = makePowerFn();
let square = powerGenerator();    // exponent = 1
let cube = powerGenerator();      // exponent = 2
let fourth = powerGenerator();    // exponent = 3

println(square(3));   // Should println 3^1 = 3
println(cube(3));     // Should println 3^2 = 9
println(fourth(3));   // Should println 3^3 = 27
println("");

// Anonymous functions as arguments
let applyTwice = fn(f, x) {
    return f(f(x));
};

let addOne = fn(x) { return x + 1; };
println("Test 5 - Functions as arguments:");
println(applyTwice(addOne, 5));  // Should println 7 (5 + 1 + 1)
println("");

// Immediate invocation
println("Test 6 - Immediate invocation:");
println(fn(x) { return x * 2; }(21));  // Should println 42
println("");

// Returning different functions based on condition
let makeOperation = fn(type) {
    if (type == "add") {
        return fn(a, b) { return a + b; };
    } else {
        return fn(a, b) { return a * b; };
    }
};

println("Test 7 - Conditional function returns:");
let operation1 = makeOperation("add");
let operation2 = makeOperation("multiply");
println(operation1(5, 3));  // Should println 8
println(operation2(5, 3));  // Should println 15
println("");

// Complex closure with multiple variables
let makeAdder = fn(x) {
    let base = x;
    return fn(y) {
        let sum = base + y;
        return fn(z) {
            return sum + z;
        };
    };
};

println("Test 8 - Complex closure:");
let add5 = makeAdder(5);
let add5and10 = add5(10);
let add5and10and15 = add5and10(15);
println(add5and10and15);  // Should println 30
println("");

// Recursive anonymous function using let
println("Test 9 - Recursive anonymous function:");
let factorial = fn(n) {
    if (n <= 1) { return 1; }
    return n * factorial(n - 1);
};
println(factorial(5));  // Should println 120
println("");

// Error case handling (these should println appropriate error messages)
println("Test 10 - Error cases:");
// let errorFn1 = fn(a, b,) {};  // Syntax error: trailing comma
// let errorFn2 = fn(a b) {};    // Syntax error: missing comma
// errorFn3();                   // Runtime error: undefined variable