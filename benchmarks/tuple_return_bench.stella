// Nested function calls with multiple returns
let nested = fn() {
    let inner = fn() {
        return 4, 5, 6;
    };
    let x, y, z = inner();
    return x + 1, y + 1, z + 1;
};
let d, e, f = nested();
println("Nested function test:");
println(d);  // Should be 5
println(e);  // Should be 6
println(f);  // Should be 7


// Basic multiple return and unpacking
let test = fn() { return 1, 2, 3; };
let a, b, c = test();
println("Basic test:");
println(a);  // Should be 1
println(b);  // Should be 2
println(c);  // Should be 3

// Multiple returns with expressions
let withExpr = fn() {return 1 + 1, 2 * 2, 3 + 3;};
let g, h, i = withExpr();
println("Expression test:");
println(g);  // Should be 2
println(h);  // Should be 4
println(i);  // Should be 6

// Function that returns different counts based on condition
let conditional = fn(x) {
    if (x) {
        return 1, 2;
    }
    return 3, 4, 5;
};

let j, k = conditional(true);
println("Conditional test 1:");
println(j);  // Should be 1
println(k);  // Should be 2

let l, m, n = conditional(false);
println("Conditional test 2:");
println(l);  // Should be 3
println(m);  // Should be 4
println(n);  // Should be 5

// Test with function calls in return
let helper = fn() { return 10; };
let withCalls = fn() {
    return helper(), helper() + 1, helper() + 2;
};
let o, p, q = withCalls();
println("Function call test:");
println(o);  // Should be 10
println(p);  // Should be 11
println(q);  // Should be 12



// Basic test to verify single-level returns
let a1, b1, c1 = 1, 2, 3;
println("Test 1 - Basic multiple assignment");
println(a1);  // Should be 3
println(b1);  // Should be 2
println(c1);  // Should be 1

// Two levels of nesting
let test2 = fn() {
    let inner = fn() { return 4, 5, 6; };
    let x, y, z = inner();
    return x + 1, y + 1, z + 1;
};
let a2, b2, c2 = test2();
println("Test 2 - Two levels of nesting:");
println(a2);  // Should be 7
println(b2);  // Should be 6
println(c2);  // Should be 5

// Three levels of nesting
let test3 = fn() {
    let inner1 = fn() {
        let inner2 = fn() { return 1, 2, 3; };
        let x, y, z = inner2();
        return x * 2, y * 2, z * 2;
    };
    let a, b, c = inner1();
    return a + 1, b + 1, c + 1;
};
let a3, b3, c3 = test3();
println("Test 3 - Three levels of nesting:");
println(a3);  // Should be 7
println(b3);  // Should be 5
println(c3);  // Should be 3

// Multiple nested calls in one expression
let test4 = fn() {
    let f1 = fn() { return 1, 2; };
    let f2 = fn() { return 3, 4; };
    let a, b = f1();
    let c, d = f2();
    return a + c, b + d;
};
let a4, b4 = test4();
println("Test 4 - Multiple nested calls:");
println(a4);  // Should be 6 (2 + 4)
println(b4);  // Should be 4 (1 + 3)

// Nested calls with different return counts
let test5 = fn() {
    let f1 = fn(x) {
        if (x) { return 1, 2; }
        return 3, 4, 5;
    };
    let a, b = f1(true);
    let c, d, e = f1(false);
    return a + c, b + d, e;
};
let a5, b5, c5 = test5();
println("Test 5 - Different return counts:");
println(a5);  // Should be 5
println(b5);  // Should be 6 (2 + 4)
println(c5);  // Should be 4 (1 + 3)

// Deep nesting with computation at each level
let test6 = fn() {
    let level3 = fn() { return 1, 2, 3; };
    let level2 = fn() {
        let x, y, z = level3();
        return x + 1, y + 2, z + 3;
    };
    let level1 = fn() {
        let a, b, c = level2();
        return a * 2, b * 2, c * 2;
    };
    let p, q, r = level1();
    return p + 10, q + 20, r + 30;
};
let a6, b6, c6 = test6();
println("Test 6 - Deep nesting with computation:");
println(a6);  // Should be 42 ((3 + 3) * 2 + 30)
println(b6);  // Should be 28 ((2 + 2) * 2 + 20)
println(c6);  // Should be 14 ((1 + 1) * 2 + 10)

// Test with mixed return counts at different nesting levels
let test7 = fn() {
    let f1 = fn() { return 1, 2; };
    let f2 = fn() {
        let x, y = f1();
        return x, y, x + y;
    };
    let f3 = fn() {
        let a, b, c = f2();
        return a, b, c, a + b + c;
    };
    let w, x, y, z = f3();
    return w + x, y + z;
};
let a7, b7 = test7();
println("Test 7 - Mixed return counts:");
println(a7);  // Should be 9 (6 + 3)
println(b7);  // Should be 3 (1 + 2)

