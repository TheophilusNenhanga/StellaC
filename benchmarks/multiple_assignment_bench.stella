// Global scope multiple assignments
let a1, b1 = 1, 2;
println("Global scope - two values:");
println(a1); // Should print 1
println(b1); // Should print 2

// Test too many values
// {
//   let x1, y1 = 1, 2, 3; // Should error: Too many values to unpack
// }
// Passed

// Test too few values 
// {
//   let p1, q1, r1 = 1, 2; // Should error: Not enough values to unpack
// }
// Passed

// Nested scope tests
{
  let a2, b2 = 10, 20;
  println("Outer scope - two values:");
  println(a2); // Should print 10
  println(b2); // Should print 20
  
  {
    let x2, y2, z2 = 100, 200, 300;
    println("Inner scope - three values:");
    println(x2); // Should print 100
    println(y2); // Should print 200
    println(z2); // Should print 300
    
    // Test single value assignment
    let p2 = 999;
    println("Inner scope - single value:");
    println(p2); // Should print 999
  }
  
  // Test multiple assignments with expressions
  let m1, m2 = 5 + 5, 10 * 2;
  println("Outer scope - expressions:");
  println(m1); // Should print 10
  println(m2); // Should print 20
}

// Test function returns vs direct values
fn returnTwo() {
  return 50, 60;
}

let r1, r2 = returnTwo();
println("Function return values:");
println(r1); // Should print 50
println(r2); // Should print 60

// Test mixing direct values in deeper scopes
{
  let a3 = 1;
  {
    let b3, c3 = 2, 3;
    {
      let d3, e3, f3 = 4, 5, 6;
      println("Deep scope - all values:");
      println(a3); // Should print 1
      println(b3); // Should print 2
      println(c3); // Should print 3
      println(d3); // Should print 4
      println(e3); // Should print 5
      println(f3); // Should print 6
    }
  }
}

// Test with different types
let str1, num1, bool1 = "hello", 42, true;
println("Different types:");
println(str1);  // Should print "hello"
println(num1);  // Should print 42
println(bool1); // Should print true

// Test complex expressions
let exp1, exp2, exp3 = 10 + 5 * 2, 100 / 4, 7 % 3;
println("Complex expressions:");
println(exp1); // Should print 20
println(exp2); // Should print 25
println(exp3); // Should print 1

println("");
fn test() {
    let a, b, c = 4, 3, 2;
    println(a);
    println(b);
    println(c);
    fn inner() {
        let d, e, f = 12, 34, 645;
        println(d);
        println(e);
        println(f);
        return d, e, f;
    }
    let d, e, f = inner();
    println(d);
    println(e);
    println(f);
    return d, e, f;
}

let d, e, f = test();
println(d);
println(e);
println(f);
