// Helper function to print test results
fn print_test(name, result, err) {
    println("Test: " + name);
    println("Result: " + result);
    println("Error: " + err);
    println("");
}

// Test arithmetic operations
fn safe_divide(a, b) {
    if b == 0 {
        return nil, error("Division by zero");
    }
    return a / b, nil;
}

fn test_division() {
    // Test successful case
    let result1, err1 = safe_divide(10, 2);
    print_test("Division (success)", result1, err1);

    // Test error case
    let result2, err2 = safe_divide(10, 0);
    print_test("Division (error case)", result2, err2);
}

// Test array operations
fn safe_array_get(arr, index) {
    let err, length = len(arr);
    if length < 0 or index >= length {
        return nil, error("Index out of bounds: " + index);
    }
    return arr[index], nil;
}

fn test_array() {
    let arr = [1, 2, 3];

    // Test successful case
    let val1, err1 = safe_array_get(arr, 1);
    print_test("Array access (success)", val1, err1);

    // Test error case
    let val2, err2 = safe_array_get(arr, 5);
    print_test("Array access (error case)", val2, err2);
}


// Test nested error handling
fn inner_operation(value) {
    if value < 0 {
        return nil, error("Value cannot be negative");
    }
    return value + 1, nil;
}

fn outer_operation(value) {
    let result, err = inner_operation(value);
    if err != nil {
        return nil, error("Outer: " + err);
    }
    return result * 2, nil;
}

fn test_nested_errors() {
    // Test successful case
    let result1, err1 = outer_operation(5);
    print_test("Nested operation (success)", result1, err1);

    // Test error case
    let result2, err2 = outer_operation(-5);
    print_test("Nested operation (error case)", result2, err2);
}

// Test string operations
fn safe_substring(str, start, length) {
    let err, lengthy = len(str);
    if start < 0 or start >= lengthy {
        return nil, error("Invalid start index");
    }
    if length < 0 or start + length > lengthy {
        return nil, error("Invalid length");
    }
    // Note: This is a mock operation as Stella might not support actual substring
    return str, nil;  // Replace with actual substring when available
}

fn test_string_operations() {
    let test_str = "Hello";

    // Test successful case
    let result1, err1 = safe_substring(test_str, 0, 3);
    print_test("String operation (success)", result1, err1);

    // Test error case
    let result2, err2 = safe_substring(test_str, 10, 1);
    print_test("String operation (error case)", result2, err2);
}

// Run all tests
fn run_all_tests() {
    println("=== Starting Error Handling Tests ===");

    test_division();
    test_array();
    test_nested_errors();
    test_string_operations();

    println("=== All Tests Completed ===");
}

// Execute the test suite
run_all_tests();