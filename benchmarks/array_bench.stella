// Array Creation and Basic Operations Test
println("=== Array Creation and Basic Operations ===");
let arr1 = [];
println(arr1);  // Should print: []

let arr2 = [1, 2, 3];
println(arr2);  // Should print: [1, 2, 3]

// Test nested arrays
let nested = [[1, 2], [3, 4], [5, 6]];
println(nested);  // Should print: [[1, 2], [3, 4], [5, 6]]

// Array Access Tests
println("\n=== Array Access Tests ===");
println(arr2[0]);   // Should print: 1
println(arr2[2]);   // Should print: 3
println(nested[0][1]);  // Should print: 2

// Array Modification Tests
println("\n=== Array Modification Tests ===");
array_add(arr2, arr2[0] + arr2[1]);  // Add sum of first two elements
println(arr2);  // Should print: [1, 2, 3, 3]

// Large Array Test
println("\n=== Large Array Test ===");
let large_arr = [];
let target_size = 1000;
let start_time = time_ms();
for let i = 0; i < target_size; i += 1 {
    array_add(large_arr, i);
}
let end_time = time_ms();


// Mixed Type Test
println("\n=== Mixed Type Test ===");
let mixed = [];
array_add(mixed, 42);        // number
array_add(mixed, "hello");   // string
array_add(mixed, true);      // boolean
array_add(mixed, nil);       // nil
array_add(mixed, [1, 2, 3]); // array
println(mixed);

// Fibonacci Benchmark
println("\n=== Fibonacci Sequence Generation ===");
let fib = [0, 1];
let target = 30;  // Generate first 30 Fibonacci numbers
start_time = time_ms();
for let i = 2; i < target; i += 1 {
    array_add(fib, fib[i-1] + fib[i-2]);
}
end_time = time_ms();
println(fib);

// Edge Cases
println("\n=== Edge Cases ===");
// Test empty array operations
let empty = [];
array_add(empty, 1);
println(empty);

// Test large numbers
let big_nums = [];
array_add(big_nums, 9007199254740991);  // Max safe integer in JavaScript
array_add(big_nums, -9007199254740991);
println("big numbers: ");
println(big_nums);

// Test floating point numbers
let floats = [3.14159, 2.71828, -0.0001];
println(floats);

// Error Cases
println("\n=== Error Cases ===");
// Attempt to add to non-array
println("Testing invalid array_add...");
array_add(42, 1);  // Should error

// Array bounds test
println("Testing array bounds...");
let bounds = [1];
// println(bounds[-1]);  // Should error
// println(bounds[1]);   // Should error

// Performance Test with Different Operations
println("\n=== Performance Test ===");
let perf_arr = [];
start_time = time_ms();
// Mix of operations
for let i = 0; i < 1000; i += 1 {
    array_add(perf_arr, i);
    if i % 100 == 0 {
        let val = perf_arr[i/2];  // Random access
        array_add(perf_arr, val); // Add existing value
    }
}
end_time = time_ms();

// Memory Stress Test
println("\n=== Memory Stress Test ===");
let stress_arr = [];
start_time = time_ms();
let stress_target = 10000;
for let i = 0; i < stress_target; i += 1 {
    array_add(stress_arr, [1, 2, 3]);  // Add nested arrays
    if i % 1000 == 0 {
        println(i);
        // println(stress_arr);
    }
}
end_time = time_ms();