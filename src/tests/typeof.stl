// Testing the typeof function

println("=== Testing the typeof function ===");

let a = "string";
let b = 1;
let c = true;
let d = nil;
let e = [1, 2, 3];
let f = {a: 1, b: 2};
let g = fn (test) { return test; };
class Test {}
let h = Test();
let j = len(e);

let aType = typeof(a);
let bType = typeof(b);
let cType = typeof(c);
let dType = typeof(d);
let eType = typeof(e);
let fType = typeof(f);
let gType = typeof(g);
let hType = typeof(h);
let iType = typeof(Test);
let jType = typeof(j);

fn a (condition, message) {
    if not condition {
        print(message);
    }
}

a(aType == "string", "aType is not string");
a(bType == "number", "bType is not number");
a(cType == "boolean", "cType is not boolean");
a(dType == "nil", "dType is not nil");
a(eType == "array", "eType is not array");
a(fType == "table", "fType is not table");
a(gType == "function", "gType is not function");
a(hType == "instance", "hType is not instance");
a(iType == "class", "iType is not class");
a(jType == "result", "jType is not result");

println("aType: " + aType);
println("bType: " + bType);
println("cType: " + cType);
println("dType: " + dType);
println("eType: " + eType);
println("fType: " + fType);
println("gType: " + gType);
println("hType: " + hType);
println("iType: " + iType);
println("jType: " + jType);

println("=== typeof function test complete ===");