#ifndef SCANNER_H
#define SCANNER_H

typedef enum {
	// Single-character tokens.
	TOKEN_LEFT_PAREN,
	TOKEN_RIGHT_PAREN,
	TOKEN_LEFT_BRACE,
	TOKEN_RIGHT_BRACE,
	TOKEN_COMMA,
	TOKEN_DOT,
	TOKEN_MINUS,
	TOKEN_PLUS,
	TOKEN_SEMICOLON,
	TOKEN_SLASH,
	TOKEN_STAR,
	TOKEN_PERCENT,
	// One or two character tokens.
	TOKEN_BANG_EQUAL,
	TOKEN_EQUAL,
	TOKEN_EQUAL_EQUAL,
	TOKEN_GREATER,
	TOKEN_GREATER_EQUAL,
	TOKEN_LESS,
	TOKEN_LESS_EQUAL,
	TOKEN_LEFT_SHIFT,
	TOKEN_RIGHT_SHIFT,
	// Literals.
	TOKEN_IDENTIFIER,
	TOKEN_STRING,
	TOKEN_INT,
	TOKEN_FLOAT,
	// Keywords.
	TOKEN_AND,
	TOKEN_NOT,
	TOKEN_CLASS,
	TOKEN_ELSE,
	TOKEN_FALSE,
	TOKEN_FOR,
	TOKEN_FN,
	TOKEN_IF,
	TOKEN_NIL,
	TOKEN_OR,
	TOKEN_RETURN,
	TOKEN_SUPER,
	TOKEN_SELF,
	TOKEN_TRUE,
	TOKEN_LET,
	TOKEN_SET,
	TOKEN_WHILE,
	TOKEN_ERROR,
	TOKEN_BREAK,
	TOKEN_CONTINUE,
	TOKEN_EOF
} TokenType;

typedef struct {
	TokenType type;
	const char *start;
	int length;
	int line;
} Token;

void initScanner(const char *source);

Token scanToken();

#endif // SCANNER_H
